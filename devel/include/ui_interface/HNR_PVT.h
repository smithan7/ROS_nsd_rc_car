// Generated by gencpp from file ui_interface/HNR_PVT.msg
// DO NOT EDIT!


#ifndef UI_INTERFACE_MESSAGE_HNR_PVT_H
#define UI_INTERFACE_MESSAGE_HNR_PVT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ui_interface
{
template <class ContainerAllocator>
struct HNR_PVT_
{
  typedef HNR_PVT_<ContainerAllocator> Type;

  HNR_PVT_()
    : header()
    , iTOW(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0)
    , valid(0)
    , VALID_DATE(0)
    , VALID_TIME(0)
    , VALID_FULLY_RESOLVED(0)
    , VALID_MAG(0)
    , nano(0)
    , gpsFix(0)
    , flags(0)
    , FLAGS_GNSS_FIX_OK(0)
    , FLAGS_DIFF_SOLN(0)
    , FLAGS_WKN_SET(0)
    , FLAGS_TOW_SET(0)
    , FLAGS_HEAD_VEH_VALID(0)
    , reserved0()
    , lon(0)
    , lat(0)
    , height(0)
    , hMSL(0)
    , gSpeed(0)
    , speed(0)
    , headMot(0)
    , headVeh(0)
    , hAcc(0)
    , vAcc(0)
    , sAcc(0)
    , headAcc(0)
    , reserved1()  {
      reserved0.assign(0);

      reserved1.assign(0);
  }
  HNR_PVT_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , iTOW(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0)
    , valid(0)
    , VALID_DATE(0)
    , VALID_TIME(0)
    , VALID_FULLY_RESOLVED(0)
    , VALID_MAG(0)
    , nano(0)
    , gpsFix(0)
    , flags(0)
    , FLAGS_GNSS_FIX_OK(0)
    , FLAGS_DIFF_SOLN(0)
    , FLAGS_WKN_SET(0)
    , FLAGS_TOW_SET(0)
    , FLAGS_HEAD_VEH_VALID(0)
    , reserved0()
    , lon(0)
    , lat(0)
    , height(0)
    , hMSL(0)
    , gSpeed(0)
    , speed(0)
    , headMot(0)
    , headVeh(0)
    , hAcc(0)
    , vAcc(0)
    , sAcc(0)
    , headAcc(0)
    , reserved1()  {
  (void)_alloc;
      reserved0.assign(0);

      reserved1.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _iTOW_type;
  _iTOW_type iTOW;

   typedef uint16_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _day_type;
  _day_type day;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _min_type;
  _min_type min;

   typedef uint8_t _sec_type;
  _sec_type sec;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint8_t _VALID_DATE_type;
  _VALID_DATE_type VALID_DATE;

   typedef uint8_t _VALID_TIME_type;
  _VALID_TIME_type VALID_TIME;

   typedef uint8_t _VALID_FULLY_RESOLVED_type;
  _VALID_FULLY_RESOLVED_type VALID_FULLY_RESOLVED;

   typedef uint8_t _VALID_MAG_type;
  _VALID_MAG_type VALID_MAG;

   typedef int32_t _nano_type;
  _nano_type nano;

   typedef uint8_t _gpsFix_type;
  _gpsFix_type gpsFix;

   typedef uint8_t _flags_type;
  _flags_type flags;

   typedef uint8_t _FLAGS_GNSS_FIX_OK_type;
  _FLAGS_GNSS_FIX_OK_type FLAGS_GNSS_FIX_OK;

   typedef uint8_t _FLAGS_DIFF_SOLN_type;
  _FLAGS_DIFF_SOLN_type FLAGS_DIFF_SOLN;

   typedef uint8_t _FLAGS_WKN_SET_type;
  _FLAGS_WKN_SET_type FLAGS_WKN_SET;

   typedef uint8_t _FLAGS_TOW_SET_type;
  _FLAGS_TOW_SET_type FLAGS_TOW_SET;

   typedef uint8_t _FLAGS_HEAD_VEH_VALID_type;
  _FLAGS_HEAD_VEH_VALID_type FLAGS_HEAD_VEH_VALID;

   typedef boost::array<uint8_t, 2>  _reserved0_type;
  _reserved0_type reserved0;

   typedef int32_t _lon_type;
  _lon_type lon;

   typedef int32_t _lat_type;
  _lat_type lat;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _hMSL_type;
  _hMSL_type hMSL;

   typedef int32_t _gSpeed_type;
  _gSpeed_type gSpeed;

   typedef int32_t _speed_type;
  _speed_type speed;

   typedef int32_t _headMot_type;
  _headMot_type headMot;

   typedef int32_t _headVeh_type;
  _headVeh_type headVeh;

   typedef uint32_t _hAcc_type;
  _hAcc_type hAcc;

   typedef uint32_t _vAcc_type;
  _vAcc_type vAcc;

   typedef uint32_t _sAcc_type;
  _sAcc_type sAcc;

   typedef uint32_t _headAcc_type;
  _headAcc_type headAcc;

   typedef boost::array<uint8_t, 4>  _reserved1_type;
  _reserved1_type reserved1;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CLASS_ID)
  #undef CLASS_ID
#endif
#if defined(_WIN32) && defined(MESSAGE_ID)
  #undef MESSAGE_ID
#endif
#if defined(_WIN32) && defined(FIX_TYPE_NO_FIX)
  #undef FIX_TYPE_NO_FIX
#endif
#if defined(_WIN32) && defined(FIX_TYPE_DEAD_RECKONING_ONLY)
  #undef FIX_TYPE_DEAD_RECKONING_ONLY
#endif
#if defined(_WIN32) && defined(FIX_TYPE_2D)
  #undef FIX_TYPE_2D
#endif
#if defined(_WIN32) && defined(FIX_TYPE_3D)
  #undef FIX_TYPE_3D
#endif
#if defined(_WIN32) && defined(FIX_TYPE_GPS_DEAD_RECKONING_COMBINED)
  #undef FIX_TYPE_GPS_DEAD_RECKONING_COMBINED
#endif
#if defined(_WIN32) && defined(FIX_TYPE_TIME_ONLY)
  #undef FIX_TYPE_TIME_ONLY
#endif

  enum {
    CLASS_ID = 40u,
    MESSAGE_ID = 0u,
    FIX_TYPE_NO_FIX = 0u,
    FIX_TYPE_DEAD_RECKONING_ONLY = 1u,
    FIX_TYPE_2D = 2u,
    FIX_TYPE_3D = 3u,
    FIX_TYPE_GPS_DEAD_RECKONING_COMBINED = 4u,
    FIX_TYPE_TIME_ONLY = 5u,
  };


  typedef boost::shared_ptr< ::ui_interface::HNR_PVT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ui_interface::HNR_PVT_<ContainerAllocator> const> ConstPtr;

}; // struct HNR_PVT_

typedef ::ui_interface::HNR_PVT_<std::allocator<void> > HNR_PVT;

typedef boost::shared_ptr< ::ui_interface::HNR_PVT > HNR_PVTPtr;
typedef boost::shared_ptr< ::ui_interface::HNR_PVT const> HNR_PVTConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ui_interface::HNR_PVT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ui_interface::HNR_PVT_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ui_interface::HNR_PVT_<ContainerAllocator1> & lhs, const ::ui_interface::HNR_PVT_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.iTOW == rhs.iTOW &&
    lhs.year == rhs.year &&
    lhs.month == rhs.month &&
    lhs.day == rhs.day &&
    lhs.hour == rhs.hour &&
    lhs.min == rhs.min &&
    lhs.sec == rhs.sec &&
    lhs.valid == rhs.valid &&
    lhs.VALID_DATE == rhs.VALID_DATE &&
    lhs.VALID_TIME == rhs.VALID_TIME &&
    lhs.VALID_FULLY_RESOLVED == rhs.VALID_FULLY_RESOLVED &&
    lhs.VALID_MAG == rhs.VALID_MAG &&
    lhs.nano == rhs.nano &&
    lhs.gpsFix == rhs.gpsFix &&
    lhs.flags == rhs.flags &&
    lhs.FLAGS_GNSS_FIX_OK == rhs.FLAGS_GNSS_FIX_OK &&
    lhs.FLAGS_DIFF_SOLN == rhs.FLAGS_DIFF_SOLN &&
    lhs.FLAGS_WKN_SET == rhs.FLAGS_WKN_SET &&
    lhs.FLAGS_TOW_SET == rhs.FLAGS_TOW_SET &&
    lhs.FLAGS_HEAD_VEH_VALID == rhs.FLAGS_HEAD_VEH_VALID &&
    lhs.reserved0 == rhs.reserved0 &&
    lhs.lon == rhs.lon &&
    lhs.lat == rhs.lat &&
    lhs.height == rhs.height &&
    lhs.hMSL == rhs.hMSL &&
    lhs.gSpeed == rhs.gSpeed &&
    lhs.speed == rhs.speed &&
    lhs.headMot == rhs.headMot &&
    lhs.headVeh == rhs.headVeh &&
    lhs.hAcc == rhs.hAcc &&
    lhs.vAcc == rhs.vAcc &&
    lhs.sAcc == rhs.sAcc &&
    lhs.headAcc == rhs.headAcc &&
    lhs.reserved1 == rhs.reserved1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ui_interface::HNR_PVT_<ContainerAllocator1> & lhs, const ::ui_interface::HNR_PVT_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ui_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ui_interface::HNR_PVT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ui_interface::HNR_PVT_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ui_interface::HNR_PVT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ui_interface::HNR_PVT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ui_interface::HNR_PVT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ui_interface::HNR_PVT_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ui_interface::HNR_PVT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d33eab200001ff2d862a768edf2ace25";
  }

  static const char* value(const ::ui_interface::HNR_PVT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd33eab200001ff2dULL;
  static const uint64_t static_value2 = 0x862a768edf2ace25ULL;
};

template<class ContainerAllocator>
struct DataType< ::ui_interface::HNR_PVT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ui_interface/HNR_PVT";
  }

  static const char* value(const ::ui_interface::HNR_PVT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ui_interface::HNR_PVT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# HNR-PVT (0x28 0x00)\n"
"# High Rate Output of PVT Solution\n"
"#\n"
"# Note that during a leap second there may be more (or less) than 60 seconds in\n"
"# a minute; see the description of leap seconds for details.\n"
"#\n"
"# This message provides the position, velocity and time solution with high \n"
"# output rate.\n"
"#\n"
"# Supported on ADR and UDR products.\n"
"#\n"
"std_msgs/Header header\n"
"\n"
"uint8 CLASS_ID = 40\n"
"uint8 MESSAGE_ID = 0\n"
"\n"
"uint32 iTOW             # GPS Millisecond time of week [ms]\n"
"uint16 year             # Year (UTC)\n"
"uint8 month             # Month, range 1..12 (UTC)\n"
"uint8 day               # Day of month, range 1..31 (UTC)\n"
"uint8 hour              # Hour of day, range 0..23 (UTC)\n"
"uint8 min               # Minute of hour, range 0..59 (UTC)\n"
"uint8 sec               # Seconds of minute, range 0..60 (UTC)\n"
"\n"
"uint8 valid             # Validity flags\n"
"uint8 VALID_DATE            # Valid UTC Date\n"
"uint8 VALID_TIME            # Valid \n"
"uint8 VALID_FULLY_RESOLVED  # UTC time of day has been fully resolved \n"
"                                # (no seconds uncertainty)\n"
"uint8 VALID_MAG             # Valid Magnetic Declination\n"
"\n"
"int32 nano              # fraction of a second [ns], range -1e9 .. 1e9 (UTC)\n"
"\n"
"uint8 gpsFix            # GPS fix Type, range 0..5\n"
"uint8 FIX_TYPE_NO_FIX = 0\n"
"uint8 FIX_TYPE_DEAD_RECKONING_ONLY = 1\n"
"uint8 FIX_TYPE_2D = 2                           # Signal from only 3 SVs, \n"
"                                                # constant altitude assumed\n"
"uint8 FIX_TYPE_3D = 3\n"
"uint8 FIX_TYPE_GPS_DEAD_RECKONING_COMBINED = 4  # GPS + Dead reckoning\n"
"uint8 FIX_TYPE_TIME_ONLY = 5                    # Time only fix \n"
"\n"
"uint8 flags             # Fix Status Flags\n"
"uint8 FLAGS_GNSS_FIX_OK          # i.e. within DOP & accuracy masks\n"
"uint8 FLAGS_DIFF_SOLN            # DGPS used\n"
"uint8 FLAGS_WKN_SET              # Valid GPS week number\n"
"uint8 FLAGS_TOW_SET              # Valid GPS time of week (iTOW & fTOW)\n"
"uint8 FLAGS_HEAD_VEH_VALID      # heading of vehicle is valid\n"
"\n"
"uint8[2] reserved0      # Reserved\n"
"\n"
"int32 lon               # Longitude [deg / 1e-7]\n"
"int32 lat               # Latitude [deg / 1e-7]\n"
"int32 height            # Height above Ellipsoid [mm]\n"
"int32 hMSL              # Height above mean sea level [mm]\n"
"\n"
"int32 gSpeed            # Ground Speed (2-D) [mm/s]\n"
"int32 speed             # Speed (3-D) [mm/s]\n"
"\n"
"int32 headMot           # Heading of motion (2-D) [deg / 1e-5]\n"
"int32 headVeh           # Heading of vehicle (2-D) [deg / 1e-5]\n"
"\n"
"uint32 hAcc             # Horizontal Accuracy Estimate [mm]\n"
"uint32 vAcc             # Vertical Accuracy Estimate [mm]\n"
"uint32 sAcc             # Speed Accuracy Estimate [mm/s]\n"
"uint32 headAcc          # Heading Accuracy Estimate (both motion & vehicle) \n"
"                        # [deg / 1e-5]\n"
"\n"
"uint8[4] reserved1      # Reserved\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ui_interface::HNR_PVT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ui_interface::HNR_PVT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.iTOW);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.min);
      stream.next(m.sec);
      stream.next(m.valid);
      stream.next(m.VALID_DATE);
      stream.next(m.VALID_TIME);
      stream.next(m.VALID_FULLY_RESOLVED);
      stream.next(m.VALID_MAG);
      stream.next(m.nano);
      stream.next(m.gpsFix);
      stream.next(m.flags);
      stream.next(m.FLAGS_GNSS_FIX_OK);
      stream.next(m.FLAGS_DIFF_SOLN);
      stream.next(m.FLAGS_WKN_SET);
      stream.next(m.FLAGS_TOW_SET);
      stream.next(m.FLAGS_HEAD_VEH_VALID);
      stream.next(m.reserved0);
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.height);
      stream.next(m.hMSL);
      stream.next(m.gSpeed);
      stream.next(m.speed);
      stream.next(m.headMot);
      stream.next(m.headVeh);
      stream.next(m.hAcc);
      stream.next(m.vAcc);
      stream.next(m.sAcc);
      stream.next(m.headAcc);
      stream.next(m.reserved1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HNR_PVT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ui_interface::HNR_PVT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ui_interface::HNR_PVT_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "iTOW: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iTOW);
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.min);
    s << indent << "sec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sec);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "VALID_DATE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VALID_DATE);
    s << indent << "VALID_TIME: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VALID_TIME);
    s << indent << "VALID_FULLY_RESOLVED: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VALID_FULLY_RESOLVED);
    s << indent << "VALID_MAG: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VALID_MAG);
    s << indent << "nano: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nano);
    s << indent << "gpsFix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gpsFix);
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
    s << indent << "FLAGS_GNSS_FIX_OK: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FLAGS_GNSS_FIX_OK);
    s << indent << "FLAGS_DIFF_SOLN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FLAGS_DIFF_SOLN);
    s << indent << "FLAGS_WKN_SET: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FLAGS_WKN_SET);
    s << indent << "FLAGS_TOW_SET: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FLAGS_TOW_SET);
    s << indent << "FLAGS_HEAD_VEH_VALID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FLAGS_HEAD_VEH_VALID);
    s << indent << "reserved0[]" << std::endl;
    for (size_t i = 0; i < v.reserved0.size(); ++i)
    {
      s << indent << "  reserved0[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.reserved0[i]);
    }
    s << indent << "lon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lat);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "hMSL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hMSL);
    s << indent << "gSpeed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gSpeed);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "headMot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.headMot);
    s << indent << "headVeh: ";
    Printer<int32_t>::stream(s, indent + "  ", v.headVeh);
    s << indent << "hAcc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.hAcc);
    s << indent << "vAcc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vAcc);
    s << indent << "sAcc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sAcc);
    s << indent << "headAcc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.headAcc);
    s << indent << "reserved1[]" << std::endl;
    for (size_t i = 0; i < v.reserved1.size(); ++i)
    {
      s << indent << "  reserved1[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.reserved1[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UI_INTERFACE_MESSAGE_HNR_PVT_H
