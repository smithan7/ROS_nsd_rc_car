# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ins_interface/HNR_PVT.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class HNR_PVT(genpy.Message):
  _md5sum = "d33eab200001ff2d862a768edf2ace25"
  _type = "ins_interface/HNR_PVT"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# HNR-PVT (0x28 0x00)
# High Rate Output of PVT Solution
#
# Note that during a leap second there may be more (or less) than 60 seconds in
# a minute; see the description of leap seconds for details.
#
# This message provides the position, velocity and time solution with high 
# output rate.
#
# Supported on ADR and UDR products.
#
std_msgs/Header header

uint8 CLASS_ID = 40
uint8 MESSAGE_ID = 0

uint32 iTOW             # GPS Millisecond time of week [ms]
uint16 year             # Year (UTC)
uint8 month             # Month, range 1..12 (UTC)
uint8 day               # Day of month, range 1..31 (UTC)
uint8 hour              # Hour of day, range 0..23 (UTC)
uint8 min               # Minute of hour, range 0..59 (UTC)
uint8 sec               # Seconds of minute, range 0..60 (UTC)

uint8 valid             # Validity flags
uint8 VALID_DATE            # Valid UTC Date
uint8 VALID_TIME            # Valid 
uint8 VALID_FULLY_RESOLVED  # UTC time of day has been fully resolved 
                                # (no seconds uncertainty)
uint8 VALID_MAG             # Valid Magnetic Declination

int32 nano              # fraction of a second [ns], range -1e9 .. 1e9 (UTC)

uint8 gpsFix            # GPS fix Type, range 0..5
uint8 FIX_TYPE_NO_FIX = 0
uint8 FIX_TYPE_DEAD_RECKONING_ONLY = 1
uint8 FIX_TYPE_2D = 2                           # Signal from only 3 SVs, 
                                                # constant altitude assumed
uint8 FIX_TYPE_3D = 3
uint8 FIX_TYPE_GPS_DEAD_RECKONING_COMBINED = 4  # GPS + Dead reckoning
uint8 FIX_TYPE_TIME_ONLY = 5                    # Time only fix 

uint8 flags             # Fix Status Flags
uint8 FLAGS_GNSS_FIX_OK          # i.e. within DOP & accuracy masks
uint8 FLAGS_DIFF_SOLN            # DGPS used
uint8 FLAGS_WKN_SET              # Valid GPS week number
uint8 FLAGS_TOW_SET              # Valid GPS time of week (iTOW & fTOW)
uint8 FLAGS_HEAD_VEH_VALID      # heading of vehicle is valid

uint8[2] reserved0      # Reserved

int32 lon               # Longitude [deg / 1e-7]
int32 lat               # Latitude [deg / 1e-7]
int32 height            # Height above Ellipsoid [mm]
int32 hMSL              # Height above mean sea level [mm]

int32 gSpeed            # Ground Speed (2-D) [mm/s]
int32 speed             # Speed (3-D) [mm/s]

int32 headMot           # Heading of motion (2-D) [deg / 1e-5]
int32 headVeh           # Heading of vehicle (2-D) [deg / 1e-5]

uint32 hAcc             # Horizontal Accuracy Estimate [mm]
uint32 vAcc             # Vertical Accuracy Estimate [mm]
uint32 sAcc             # Speed Accuracy Estimate [mm/s]
uint32 headAcc          # Heading Accuracy Estimate (both motion & vehicle) 
                        # [deg / 1e-5]

uint8[4] reserved1      # Reserved
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  CLASS_ID = 40
  MESSAGE_ID = 0
  FIX_TYPE_NO_FIX = 0
  FIX_TYPE_DEAD_RECKONING_ONLY = 1
  FIX_TYPE_2D = 2
  FIX_TYPE_3D = 3
  FIX_TYPE_GPS_DEAD_RECKONING_COMBINED = 4
  FIX_TYPE_TIME_ONLY = 5

  __slots__ = ['header','iTOW','year','month','day','hour','min','sec','valid','VALID_DATE','VALID_TIME','VALID_FULLY_RESOLVED','VALID_MAG','nano','gpsFix','flags','FLAGS_GNSS_FIX_OK','FLAGS_DIFF_SOLN','FLAGS_WKN_SET','FLAGS_TOW_SET','FLAGS_HEAD_VEH_VALID','reserved0','lon','lat','height','hMSL','gSpeed','speed','headMot','headVeh','hAcc','vAcc','sAcc','headAcc','reserved1']
  _slot_types = ['std_msgs/Header','uint32','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','int32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8[2]','int32','int32','int32','int32','int32','int32','int32','int32','uint32','uint32','uint32','uint32','uint8[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,iTOW,year,month,day,hour,min,sec,valid,VALID_DATE,VALID_TIME,VALID_FULLY_RESOLVED,VALID_MAG,nano,gpsFix,flags,FLAGS_GNSS_FIX_OK,FLAGS_DIFF_SOLN,FLAGS_WKN_SET,FLAGS_TOW_SET,FLAGS_HEAD_VEH_VALID,reserved0,lon,lat,height,hMSL,gSpeed,speed,headMot,headVeh,hAcc,vAcc,sAcc,headAcc,reserved1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HNR_PVT, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.iTOW is None:
        self.iTOW = 0
      if self.year is None:
        self.year = 0
      if self.month is None:
        self.month = 0
      if self.day is None:
        self.day = 0
      if self.hour is None:
        self.hour = 0
      if self.min is None:
        self.min = 0
      if self.sec is None:
        self.sec = 0
      if self.valid is None:
        self.valid = 0
      if self.VALID_DATE is None:
        self.VALID_DATE = 0
      if self.VALID_TIME is None:
        self.VALID_TIME = 0
      if self.VALID_FULLY_RESOLVED is None:
        self.VALID_FULLY_RESOLVED = 0
      if self.VALID_MAG is None:
        self.VALID_MAG = 0
      if self.nano is None:
        self.nano = 0
      if self.gpsFix is None:
        self.gpsFix = 0
      if self.flags is None:
        self.flags = 0
      if self.FLAGS_GNSS_FIX_OK is None:
        self.FLAGS_GNSS_FIX_OK = 0
      if self.FLAGS_DIFF_SOLN is None:
        self.FLAGS_DIFF_SOLN = 0
      if self.FLAGS_WKN_SET is None:
        self.FLAGS_WKN_SET = 0
      if self.FLAGS_TOW_SET is None:
        self.FLAGS_TOW_SET = 0
      if self.FLAGS_HEAD_VEH_VALID is None:
        self.FLAGS_HEAD_VEH_VALID = 0
      if self.reserved0 is None:
        self.reserved0 = b'\0'*2
      if self.lon is None:
        self.lon = 0
      if self.lat is None:
        self.lat = 0
      if self.height is None:
        self.height = 0
      if self.hMSL is None:
        self.hMSL = 0
      if self.gSpeed is None:
        self.gSpeed = 0
      if self.speed is None:
        self.speed = 0
      if self.headMot is None:
        self.headMot = 0
      if self.headVeh is None:
        self.headVeh = 0
      if self.hAcc is None:
        self.hAcc = 0
      if self.vAcc is None:
        self.vAcc = 0
      if self.sAcc is None:
        self.sAcc = 0
      if self.headAcc is None:
        self.headAcc = 0
      if self.reserved1 is None:
        self.reserved1 = b'\0'*4
    else:
      self.header = std_msgs.msg.Header()
      self.iTOW = 0
      self.year = 0
      self.month = 0
      self.day = 0
      self.hour = 0
      self.min = 0
      self.sec = 0
      self.valid = 0
      self.VALID_DATE = 0
      self.VALID_TIME = 0
      self.VALID_FULLY_RESOLVED = 0
      self.VALID_MAG = 0
      self.nano = 0
      self.gpsFix = 0
      self.flags = 0
      self.FLAGS_GNSS_FIX_OK = 0
      self.FLAGS_DIFF_SOLN = 0
      self.FLAGS_WKN_SET = 0
      self.FLAGS_TOW_SET = 0
      self.FLAGS_HEAD_VEH_VALID = 0
      self.reserved0 = b'\0'*2
      self.lon = 0
      self.lat = 0
      self.height = 0
      self.hMSL = 0
      self.gSpeed = 0
      self.speed = 0
      self.headMot = 0
      self.headVeh = 0
      self.hAcc = 0
      self.vAcc = 0
      self.sAcc = 0
      self.headAcc = 0
      self.reserved1 = b'\0'*4

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IH10Bi7B().pack(_x.iTOW, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid, _x.VALID_DATE, _x.VALID_TIME, _x.VALID_FULLY_RESOLVED, _x.VALID_MAG, _x.nano, _x.gpsFix, _x.flags, _x.FLAGS_GNSS_FIX_OK, _x.FLAGS_DIFF_SOLN, _x.FLAGS_WKN_SET, _x.FLAGS_TOW_SET, _x.FLAGS_HEAD_VEH_VALID))
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_8i4I().pack(_x.lon, _x.lat, _x.height, _x.hMSL, _x.gSpeed, _x.speed, _x.headMot, _x.headVeh, _x.hAcc, _x.vAcc, _x.sAcc, _x.headAcc))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.iTOW, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid, _x.VALID_DATE, _x.VALID_TIME, _x.VALID_FULLY_RESOLVED, _x.VALID_MAG, _x.nano, _x.gpsFix, _x.flags, _x.FLAGS_GNSS_FIX_OK, _x.FLAGS_DIFF_SOLN, _x.FLAGS_WKN_SET, _x.FLAGS_TOW_SET, _x.FLAGS_HEAD_VEH_VALID,) = _get_struct_IH10Bi7B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved0 = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.lon, _x.lat, _x.height, _x.hMSL, _x.gSpeed, _x.speed, _x.headMot, _x.headVeh, _x.hAcc, _x.vAcc, _x.sAcc, _x.headAcc,) = _get_struct_8i4I().unpack(str[start:end])
      start = end
      end += 4
      self.reserved1 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IH10Bi7B().pack(_x.iTOW, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid, _x.VALID_DATE, _x.VALID_TIME, _x.VALID_FULLY_RESOLVED, _x.VALID_MAG, _x.nano, _x.gpsFix, _x.flags, _x.FLAGS_GNSS_FIX_OK, _x.FLAGS_DIFF_SOLN, _x.FLAGS_WKN_SET, _x.FLAGS_TOW_SET, _x.FLAGS_HEAD_VEH_VALID))
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_8i4I().pack(_x.lon, _x.lat, _x.height, _x.hMSL, _x.gSpeed, _x.speed, _x.headMot, _x.headVeh, _x.hAcc, _x.vAcc, _x.sAcc, _x.headAcc))
      _x = self.reserved1
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.iTOW, _x.year, _x.month, _x.day, _x.hour, _x.min, _x.sec, _x.valid, _x.VALID_DATE, _x.VALID_TIME, _x.VALID_FULLY_RESOLVED, _x.VALID_MAG, _x.nano, _x.gpsFix, _x.flags, _x.FLAGS_GNSS_FIX_OK, _x.FLAGS_DIFF_SOLN, _x.FLAGS_WKN_SET, _x.FLAGS_TOW_SET, _x.FLAGS_HEAD_VEH_VALID,) = _get_struct_IH10Bi7B().unpack(str[start:end])
      start = end
      end += 2
      self.reserved0 = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.lon, _x.lat, _x.height, _x.hMSL, _x.gSpeed, _x.speed, _x.headMot, _x.headVeh, _x.hAcc, _x.vAcc, _x.sAcc, _x.headAcc,) = _get_struct_8i4I().unpack(str[start:end])
      start = end
      end += 4
      self.reserved1 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4s = None
def _get_struct_4s():
    global _struct_4s
    if _struct_4s is None:
        _struct_4s = struct.Struct("<4s")
    return _struct_4s
_struct_8i4I = None
def _get_struct_8i4I():
    global _struct_8i4I
    if _struct_8i4I is None:
        _struct_8i4I = struct.Struct("<8i4I")
    return _struct_8i4I
_struct_IH10Bi7B = None
def _get_struct_IH10Bi7B():
    global _struct_IH10Bi7B
    if _struct_IH10Bi7B is None:
        _struct_IH10Bi7B = struct.Struct("<IH10Bi7B")
    return _struct_IH10Bi7B
